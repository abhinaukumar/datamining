# -*- coding: utf-8 -*-
"""DataMining_Project_EICU_NK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VrxIKKQSrgP7ueLCB4dcSHu1DwXWzPVb

<font color='purple'>1. Load drive and import necessary packages</font>
##<font color='purple'>-----------------------------------------------------------------------------------------------------------------------------------------</font>
"""

#Mount Google Drive with all Data to Google Colab
#from google.colab import drive
#drive.mount('/content/drive')
#Check the path to make sure that all csv files are unzipped and available
#!ls '/content/drive/My Drive/DS project Colabs/'

#Block warnings to provide more presentable notebook 
#%%#
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt
import os

os.chdir("C:/Users/Acer/Desktop/Nisha/Nisha Career/PhD/Coursework/Fall 2020/Project/eICU/Data/")
basedir = 'C:/Users/Acer/Desktop/Nisha/Nisha Career/PhD/Coursework/Fall 2020/Project/eICU/Exports/'
#%%#
pats = pd.read_csv('patient.csv.gz', compression='gzip')
print('Patient records before any exclusion criteria is applied', pats.shape[0])
#pats.head()

NANS=pats['age'].isnull().sum()
print('Number of NaNs in age column', NANS)
pats['age'].value_counts()

#All age > 89 is coded as 90
pats.loc[pats['age'] == '> 89', 'age'] = 90
# Fill NaNs with -1
pats[['age']] = pats[['age']].fillna(-1)
pats[['age']] = pats[['age']].astype(int)
pats = pats.loc[(pats['age'] >= 18) & (pats['age'] <= 90)]

#sns.distplot(pats['age'],kde=True)

print('Patient records after age exclusion criteria is applied', pats.shape[0]) #after age exclusion criteria applied

# Find patient ids that have only 1 unit stay
cohort_count = pats.groupby(by='uniquepid').count()
index_cohort = cohort_count[cohort_count['patientunitstayid'] == 1].index
pats = pats[pats['uniquepid'].isin(index_cohort)]
pats.head()

print('Final set of all patients between age 18 and 90, and have only 1 patient unit stay id : ', pats.shape[0])

#Filter on useful column for our purposes
columns = ['patientunitstayid', 'gender', 'age', 'ethnicity', 'apacheadmissiondx',
            'admissionheight', 'hospitaladmitoffset', 'admissionweight',
            'hospitaldischargestatus', 'unitdischargeoffset', 'unitdischargestatus']

patsF = pats[columns]
patsF['patientunitstayid'].nunique()

patsF.head()

# Remove patients having invalid values for variable gender 'Not KNOWN' and NULL
patsF = patsF.loc[patsF['gender'] != 'Unknown']
patsF['patientunitstayid'].nunique()
# Removes records having NaN gender
patsF = patsF.loc[patsF['gender'].notnull()] 
patsF['patientunitstayid'].nunique()

# Remove patients having invalid discharge status
patsF = patsF.loc[patsF['hospitaldischargestatus'].notnull()]
patsF['patientunitstayid'].nunique()
patsF = patsF.loc[patsF['unitdischargestatus'].notnull()]
print('After patient id level exclusion criteria, we have ', patsF['patientunitstayid'].nunique(),'unique stay ids')
#Test
patsF[patsF['patientunitstayid']==3353121]
stayids = patsF['patientunitstayid'].unique()
#sid=nursingchart.loc[nursingchart['patientunitstayid'] == 201265]
#%%#
# Read nursingChart.csv
nursingchart = pd.read_csv('nurseCharting.csv.gz', compression='gzip')
nursingchart.drop(['nursingchartentryoffset','nursingchartcelltypecat'],axis=1,inplace=True)
typevalnm=nursingchart['nursingchartcelltypevalname'].value_counts().reset_index()
typevallabel=nursingchart['nursingchartcelltypevallabel'].value_counts().reset_index()
nursingchart.rename(index=str, columns={"nursingchartoffset": "itemoffset",
                                  "nursingchartcelltypevalname": "itemname",
                                  "nursingchartcelltypevallabel": "itemlabel",
                                  "nursingchartvalue": "itemvalue"}, inplace=True)
nursingchart = nursingchart[(nursingchart.itemlabel.isin(['Heart Rate','MAP (mmHg)','Arterial Line MAP (mmHg)'])) | (nursingchart.itemname.isin(['Non-Invasive BP Systolic', 'Invasive BP Systolic', 'Non-Invasive BP Diastolic','Invasive BP Diastolic']))]
#tst=nursingchart.head(100)
#chk=nursingchart[nursingchart.itemlabel.isin(['Arterial Line MAP (mmHg)'])].head(5)

# Unify different names from the itemname and labels here to just have 4 features
nursingchart.loc[nursingchart['itemname'] == 'Value', 'itemname'] = nursingchart.itemlabel #Replace itemlabel of 'Value' with itemnames 
#this will be either MAP or Arterial MAP
nursingchart.loc[nursingchart['itemname'] == 'Non-Invasive BP Systolic', 'itemname'] = 'Invasive BP Systolic'# Unify Non invasive to invase systolic
nursingchart.loc[nursingchart['itemname'] == 'Non-Invasive BP Diastolic', 'itemname'] = 'Invasive BP Diastolic'# Unify Non invasive to invase diastolic
nursingchart.loc[nursingchart['itemlabel'] == 'Arterial Line MAP (mmHg)', 'itemname'] = 'MAP (mmHg)'#Unify Arterial MAP and MAP to single MAP

# Check uniform names
typevalnm=nursingchart['itemname'].value_counts().reset_index()
typevallabel=nursingchart['itemlabel'].value_counts().reset_index()

# drop item label after checking for unified names
nursingchart.drop(['itemlabel','nursingchartid'],axis=1,inplace=True)

nursingchart=nursingchart.pivot_table(index=['patientunitstayid','itemoffset'], columns='itemname', values='itemvalue',aggfunc='first').reset_index()
#nursingchart['Invasive BP Systolic'].dtype
nursingchart['Invasive BP Systolic'] = nursingchart['Invasive BP Diastolic'].astype(float)
#nursingchart['Invasive BP Systolic'].max()
#nursingchart['Invasive BP Systolic'].min()
nursingchart['Invasive BP Diastolic'] = nursingchart['Invasive BP Diastolic'].astype(float)
#nursingchart['Invasive BP Diastolic'].max()
#nursingchart['Invasive BP Diastolic'].min()
nursingchart['Heart Rate']=nursingchart['Heart Rate'].astype(float)
nursingchart['MAP (mmHg)'] = nursingchart['MAP (mmHg)'].astype(float)

#sns.distplot(nursingchart['Heart Rate'])
#nursingchart['Heart Rate'].max()
#nursingchart['Heart Rate'].min()
#tst=nursingchart[nursingchart['Heart Rate']>250]['Heart Rate']
# Impute values for Heart rate and MAP. Approximate rows this imputation occurs is ~300 out of 18 MLN rows
nursingchart['Heart Rate'].clip(0, 250, inplace=True)
nursingchart['MAP (mmHg)'].clip(14, 230, inplace=True)

# Impute values for BP. Approximate rows this imputation occurs is ~500 out of 18 MLN rows
nursingchart['Invasive BP Diastolic'].clip(0, 150, inplace=True)
nursingchart['Invasive BP Systolic'].clip(0, 200, inplace=True)
#nursingchart['Invasive BP Diastolic'].mean()
#nursingchart['Invasive BP Systolic'].median()
#sns.distplot(nursingchart['Invasive BP Diastolic'])
#sns.distplot(nursingchart['Invasive BP Systolic'])
#sns.distplot(nursingchart['Heart Rate'])
#sns.distplot(nursingchart['MAP (mmHg)'])

for stayid in stayids:
    # Get records corresponding to one unit stay ID
    df = nursingchart.loc[nursingchart['patientunitstayid'] == stayid]
    if not df.empty:
           df.drop(['patientunitstayid'], axis=1, inplace=True)
           # Write to CSV file and export
           df.to_csv(os.path.join(basedir, str(stayid) + '.csv'), index = False)
           del df
    else:
           del df
psids=pd.DataFrame(data=stayids,columns=["patstayid"])
result=pd.merge(left=psids, right=nursingchart, left_on='patstayid',right_on='patientunitstayid')
result.head()
result.drop(['patstayid'], axis=1, inplace=True)
result.to_csv('NK_Features.csv', index = False)
#%%# Other random checks to understand the data
# Check values distribution for the 4 features

lab = pd.read_csv('lab.csv.gz', compression='gzip')
lab.columns
sns.distplot(nursingchart['Invasive BP Diastolic'])
nursingchart['Invasive BP Diastolic'].astype(float).max()

NK_NC_Smpl=nursingchart[nursingchart['patientunitstayid']==156342]
NK_NC_Smpl=NK_NC_Smpl.sort_values(by=['patientunitstayid','itemoffset'])
NK_NC_Smpl.columns

NK_NC_Smpltst=NK_NC_Smpl.pivot_table(index=['patientunitstayid','itemoffset'], columns='itemname', values='itemvalue',aggfunc='first').reset_index()
NK_NC_Smpltst.columns
NK_NC_Smpltst.dropna(how='all', subset=['Invasive BP Diastolic', 'Invasive BP Systolic','MAP (mmHg)','Heart Rate'], inplace=True)
#NK_NC_Smpl.to_csv('C:/Users/Acer/Desktop/Nisha/UT Box/Box Sync/EE 380 L Data Mining - Class project/NK_NC_4FeaturesSmpl.csv',index=True)
nursingchart[nursingchart['patientunitstayid']==141939]
                         

